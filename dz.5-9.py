# Напишите функцию to_dict(lst), которая принимает аргумент в виде списка и возвращает словарь, 
# в котором каждый элемент списка является и ключом и значением. Предполагается, что элементы 
# списка будут соответствовать правилам задания ключей в словарях.

# def to_dict(lst):
#     return {element: element for element in lst}

# elements = input().split()
# some_list = [elements[i] for i in range(len(elements))]

# print(to_dict(some_list))



# Иван решил создать самый большой словарь в мире. Для этого он придумал функцию 
# biggest_dict(**kwargs), которая принимает неограниченное количество параметров 
# «ключ: значение» и обновляет созданный им словарь my_dict, состоящий всего из одного 
# элемента «first_one» со значением «we can do it». Воссоздайте эту функцию.

# my_dict = {'first_one': 'we can do it'}

# def biggest_dict(**kwargs):
#     my_dict.update(**kwargs)

# biggest_dict(qw=12, er=34, ty=56, ui=78)
# biggest_dict(name = 'Эльбрус', height = 5642, track = 'С запада', category = '3a')
# print(my_dict)




# Дана строка в виде случайной последовательности чисел от 0 до 9. Требуется создать словарь, 
# который в качестве ключей будет принимать данные числа (т. е. ключи будут типом int), а в 
# качестве значений – количество этих чисел в имеющейся последовательности. Для построения 
# словаря создайте функцию count_it(sequence), принимающую строку из цифр. Функция должна 
# возвратить словарь из 3-х самых часто встречаемых чисел. 


# def count_it(sequence):
#     num_count = {int(item): sequence.count(item) for item in sequence}
#     sorted_num_count = sorted(num_count.items(), key=lambda element: element[1])
#     return dict(sorted_num_count[-3:])

# print(count_it(input('Введите случайное число: ')))






# 4.* (вместо задачи 3) Написать 
# функцию thesaurus_adv(), принимающую в качестве аргументов строки в формате «Имя Фамилия» 
# и возвращающую словарь, в котором ключи — первые буквы фамилий, а значения — словари, 
# реализованные по схеме предыдущего задания и содержащие записи, в которых фамилия начинается 
# с соответствующей буквы. Например: >>> thesaurus_adv("Иван Сергеев", "Инна Серова", 
# "Петр Алексеев", "Илья Иванов", "Анна Савельева") { "А": { "П": ["Петр Алексеев"] }, 
# "И": { "И": ["Илья Иванов"] }, "С": { "И": ["Иван Сергеев", "Инна Серова"], 
# "А": ["Анна Савельева"] } }














# НЕОБЯЗАТЕЛЬНЫЕ:
# 1. Создайте программу для игры в ""Крестики-нолики"" при помощи виртуального окружения и PIP
# 2. Прикрутить бота к задачам с предыдущего семинара:
# 1. Создать калькулятор для работы с рациональными и комплексными числами, организовать меню, добавив в неё систему логирования
# 2. Создать телефонный справочник с возможностью импорта и экспорта данных в нескольких форматах.